name: 'tf deploy to azure'

on:
  push:
    branches: [ "main" ]
    paths:
      - "/GitHubActions/src\terraform/*" 
  pull_request:
    branches:
      - main
  workflow_dispatch: #this attribute will enable the manual run to the pipeline
  workflow_call:
    inputs:
      ROOT_PATH:
        type: string
        required: true
   
env: 
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
  ROOT_PATH: '${{ github.workspace }}/src/terraform'


jobs:
  terraform:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: print path
      run: echo 'path ::${{github.workspace}}/${{ inputs.ROOT_PATH }}'
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{github.workspace}}${{ inputs.ROOT_PATH }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{github.workspace}}${{ inputs.ROOT_PATH }}